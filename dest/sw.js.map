{"version":3,"sources":["../sw.js"],"names":["window","self","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","READ_WRITE","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","alert","db","dbName","objStoreName","restaurantData","ssn","name","id","email","addEventListener","event","waitUntil","caches","open","then","cache","addAll","respondWith","match","request","localResponse","fetch","internetResponse","url","console","log","onupgradeneeded","target","result","objectStore","createObjectStore","keyPath","createIndex","transaction","oncomplete","restaurantObjectStore","clone","onerror","errorCode","put","catch"],"mappings":"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","file":"sw.js","sourcesContent":["var window = self;\n\n// In the following line, you should include the prefixes of implementations you want to test.\nwindow.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n// DON'T use \"var indexedDB = ...\" if you're not in a function.\n// Moreover, you may need references to some window.IDB* objects:\nwindow.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction || { READ_WRITE: \"readwrite\" }; // This line should only be needed if it is needed to support the object's constants for older browsers\nwindow.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n// (Mozilla has never prefixed these objects, so we don't need window.mozIDB*)\n\n\nif (!window.indexedDB) {\n    window.alert(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\n}\n\n\nvar db;\nconst dbName = \"res-rev\";\nconst objStoreName = \"restaurant-obj-store\"\n\n\n\nlet restaurantData = [\n    { ssn: \"444-44-4444\", name: \"Bill\", id: 35, email: \"bill@company.com\" },\n    { ssn: \"555-55-5555\", name: \"Donna\", id: 32, email: \"donna@home.org\" }\n];\n\n\n// Cache on install\nself.addEventListener('install', function(event) {\n    event.waitUntil(caches.open(\"caches-v1\")\n        .then(function(cache) {\n            return cache.addAll([\n                '/',\n                '/index.html',\n                '/css/styles.css',\n                '/js/main.js',\n                '/js/restaurant_info.js',\n                '/js/responsivelyLazy.min.js',\n                '/js/dbhelper.js'\n            ]);\n        })\n    );\n});\n\n\n// check if cache exists and if a match is found return it, if no match, return a network fetch and cache a clone\nself.addEventListener('fetch', function(event) {\n    event.respondWith(caches.match(event.request).then(function(localResponse) {\n        return localResponse || fetch(event.request).then(function(internetResponse) {\n\n            if (event.request.url == 'http://localhost:1337/restaurants') {\n                console.log(event.request.url);\n\n\n                var request = indexedDB.open(dbName, 1);\n                request.onupgradeneeded = function(event) {\n                    db = event.target.result;\n\n                    // Create an objectStore to hold information about the restaurants \n                    // with keyPath ID\n                    var objectStore = db.createObjectStore(objStoreName, { keyPath: \"id\" });\n\n                    // if a cuisines index is needed.\n                    objectStore.createIndex(\"cuisine_type\", \"cuisines\");\n\n                    // if a neighborhoods index is needed.\n                    objectStore.createIndex(\"neighborhood\", \"neighborhoods\");\n\n\n\n                    // Use transaction oncomplete to make sure the objectStore creation is \n                    // finished before adding data into it.\n                    objectStore.transaction.oncomplete = function(event) {\n                        // Store values in the newly created objectStore.\n                        var restaurantObjectStore = db.transaction(objStoreName, \"readwrite\")\n                            .objectStore(objStoreName);\n                        console.log(5)\n                        console.log(internetResponse.clone());\n                        // internetResponse.clone().forEach(function(restaurant) {\n                        //     restaurantObjectStore.add(restaurant);\n                        // });\n                    };\n\n                    // Generic error handler for all errors targeted at this database's\n                    // requests!\n                    db.onerror = function(event) {\n\n                        alert(\"Database error: \" + event.target.errorCode);\n                    };\n                };\n                return internetResponse.clone();\n            } else {\n                return caches.open('caches-v1').then(function(cache) {\n                    cache.put(event.request, internetResponse.clone());\n                    return internetResponse;\n                });\n            };\n        });\n        // fallback\n    }).catch(function() {\n        return caches.match('/');\n    }));\n});"]}